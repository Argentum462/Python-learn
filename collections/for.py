import os  # Информация о системе снаружи
"""
Например:
/etc/systemd... в линуксе
A:\Temp\File.txt в Windows
"""
print(os.path.join("documents", "doc1.txt"))  # В Windows и Линуксе будут разные пути в итоге: documents/doc1.txt и documents\doc1.txt

import sys  # Информация об интерпретаторе Python 

print(sys.version)  # версия интерпретатора
print(sys.argv)  # аргументы командной строки самого python

l = [1, 2, 3, 4]  # лист - это коллекция цифр в данном случае (могут быть разные типы)
print(l)  

print(True, False, False, True)

"""
args = sys.argv  # аргументы командной строки самого python
print(args[0])  # первый аргумент - это всегда путь к нашей программе
print(args[2])  # третий аргумент
print(args[-1])  # последний аргумент
"""

r = range(10)  # генератор - это коллекция, которая еще не загружена в память (не посчитана процессором), а вычисляется по запросу
print(r)  # range просто хранит формулу для расчета
print(r[2])  # тут он просто посчитал второй элемент, сам по себе он не хранится в range
print(list(r))  # тут происходит "приведение типа" - мы переводим range в list, коллекции уже обязаны хранить все собственные элементы в памяти, поэтому вывелось все


big_range = range(1, 101)
for i in big_range:
    if (i % 18) == 0:  # % - это вычисление остатка от деления (в данном случае числа, кратные 18) 
        print(i) 

z = 3  # итератор
while (z > 0):  # шаг цикла - итерация
    print(z)
    z = z-1

while (True):  # бесконечный цикл
    print("ahaha")
    #continue  # не даст break вызваться, он переходит к следующей итерации
    break


